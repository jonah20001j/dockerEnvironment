# version: '3'
services:                                          # 建立 N 個服務
  flask:
    build: # 建立指令
      # 當前 docker-compose 目錄 所指向的目錄尋找 Dockerfile
      context: ./lineBot
      dockerfile: Dockerfile
    container_name: my-flask             # 容器名稱
    image: flask_test
    env_file: # 將執行 docker-compose up 的當前資料夾中 .env匯入到./../ docker
      - ./../.env
    volumes:
      - ./lineBot:/app
    ports:
      - "5000:5000"
    networks:
      - my-network

  ngrok:
    build:
      context: ./ngrok
      dockerfile: Dockerfile
    container_name: my-ngrok
    depends_on:
      - flask
    env_file:
      - ./../.env
    volumes:
      - ./ngrok/ngrok.yml:/etc/ngrok.yml
    networks:
      - my-network

  mongo:                                           # 服務名稱
    container_name: my-mongo                       # 容器名稱
    image: mongo:4.4                               # 映像檔
    restart: unless-stopped                        # 重新啟動模式 直到手動停止為止
    ports:
      - 27017:27017                                # 外部port 對應 內部 port
    volumes:
      - /home/stanley/Documents/mongo/:/data/db    # 外部資料夾 對應 內部資料夾
    networks:                                      # 使用網絡
      - my-network                                 #  - 網絡名稱

  redis:
    container_name: my-redis
    image: redis:7.2.5
    restart: unless-stopped
    volumes:
      - /home/stanley/Documents/redis:/data
    ports:
      - 6379:6379
    networks:
      - my-network

  db:
    container_name: my-sql
    image: mysql:latest
    restart: unless-stopped
    volumes:
      - /home/stanley/Documents/mysql:/var/lib/mysql
    ports:
      - 3306:3306
    environment:                                   # 環境變數
      MYSQL_ROOT_PASSWORD: 3345678                 # root 密碼
      MYSQL_DATABASE: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    networks:
      - my-network

  phpmyadmin:
    depends_on:
      - db
    container_name: phpmyadmin
    image: phpmyadmin:latest
    restart: unless-stopped
    ports:
      - 8080:80
    environment:
      PMA_HOST: db
      PMA_PASSWORD: 3345678
    networks:
      - my-network

  express:
    build: # 建立指令
      # 當前 docker-compose 目錄 所指向的目錄尋找 Dockerfile
      context: ./express
      dockerfile: Dockerfile
    container_name: my-nodeHellowWorld             # 容器名稱
    image: express_test
    volumes:
      - /home/stanley/Documents/nodejsTest:/usr/src/app
    ports:
      - "3030:3030"
    networks:
      - my-network

  react:
    build: # 建立指令
      context: ./react
      dockerfile: Dockerfile
    container_name: my-react             # 容器名稱
    image: react_test
    volumes:
      - /home/stanley/Documents/react/:/app
      - /app/node_modules
      # 主機目錄： 無明確定義（默認為匿名卷）
      # 容器目錄： /app/node_modules
      # 作用： 這行創建了一個匿名卷來掛載到容器中的 /app/node_modules 目錄。
      # 這樣做的目的是覆蓋容器中從 react 目錄複製過來的 node_modules 目錄，
      # 從而防止主機上的 node_modules 目錄內容覆蓋容器中安裝的依賴。
    ports:
      - "3000:3000"
    networks:
      - my-network

networks:
  my-network:
    driver: bridge
